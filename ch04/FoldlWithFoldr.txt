foldr :: (a -> b -> b) -> b -> [a] -> b
foldr step zero (x:xs) = step x (foldr step zero xs)
foldr _ zero [] = zero

myFoldl :: (a -> b -> a) -> a -> [b] -> a
myFoldl f z xs = foldr step id xs z
    where step x g a = g (f a x)

myFoldl (+) 0 (1:2:3:[])
(foldr step id (1:2:3:[])) 0
(step 1 (foldr step id (2:3:[]))) 0
(step 1 (step 2 (foldr step id (3:[])))) 0
(step 1 (step 2 (step 3 (foldr step id [])))) 0
(step 1 (step 2 (step 3 id))) 0
(step 1 (step 2 (\a -> id ((+) a 3)))) 0
(step 1 (\b -> (\a -> id ((+) a 3)) ((+) b 2))) 0
(\c -> (\b -> (\a -> id ((+) a 3)) ((+) b 2)) ((+) c 1)) 0
(\b -> (\a -> id ((+) a 3)) ((+) b 2)) ((+) 0 1)
(\b -> (\a -> id ((+) a 3)) ((+) b 2)) 1
(\a -> id ((+) a 3)) ((+) 1 2)
(\a -> id ((+) a 3)) 3
id ((+) 3 3)
id 6
6
